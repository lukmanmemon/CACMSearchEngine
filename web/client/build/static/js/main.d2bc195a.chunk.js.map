{"version":3,"sources":["assets/searchLogo.png","assets/loading.gif","components/Checkbox.js","components/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["Checkbox","label","isChecked","setIsChecked","checkboxAnimationRef","useSpringRef","checkboxAnimationStyle","useSpring","backgroundColor","borderColor","config","gentle","ref","useState","checkmarkLength","setCheckmarkLength","checkmarkAnimationRef","checkmarkAnimationStyle","x","useChain","type","onChange","svg","style","className","viewBox","fill","path","d","strokeWidth","stroke","getTotalLength","strokeDasharray","strokeDashoffset","SearchBar","query","setQuery","onSubmit","role","id","value","placeholder","e","target","autoFocus","required","App","stopwords","setStopwords","stemming","setStemming","fetching","setFetching","data","setData","colours","updateInput","input","a","fetchData","toggleStop","toggleStem","fetchString","console","log","fetch","mode","then","response","json","catch","error","finally","event","preventDefault","src","logo","alt","loading","Object","keys","map","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2bc195a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/searchLogo.75171847.png\";","export default __webpack_public_path__ + \"static/media/loading.c3241809.gif\";","// Credit where credit is due: https://codesandbox.io/s/react-checkbox-3-xz9ol?file=/src/App.js Modified to fit use case\r\n\r\nimport './Checkbox.css'\r\nimport { useState } from \"react\";\r\nimport {\r\n  animated,\r\n  useSpring,\r\n  config,\r\n  useSpringRef,\r\n  useChain\r\n} from \"react-spring\";\r\n\r\nfunction Checkbox({label,isChecked,setIsChecked}) {\r\n  const checkboxAnimationRef = useSpringRef();\r\n  const checkboxAnimationStyle = useSpring({\r\n    backgroundColor: isChecked ? \"#C4d0fb\" : \"#fff\",\r\n    borderColor: isChecked ? \"#fff\" : \"#ddd\",\r\n    config: config.gentle,\r\n    ref: checkboxAnimationRef\r\n  });\r\n\r\n  const [checkmarkLength, setCheckmarkLength] = useState(null);\r\n\r\n  const checkmarkAnimationRef = useSpringRef();\r\n  const checkmarkAnimationStyle = useSpring({\r\n    x: isChecked ? 0 : checkmarkLength,\r\n    config: config.gentle,\r\n    ref: checkmarkAnimationRef\r\n  });\r\n\r\n  useChain(\r\n    isChecked\r\n      ? [checkboxAnimationRef, checkmarkAnimationRef]\r\n      : [checkmarkAnimationRef, checkboxAnimationRef],\r\n    [0, 0.1]\r\n  );\r\n\r\n  return (\r\n    <label>\r\n      <input\r\n        type=\"checkbox\"\r\n        onChange={() => {\r\n          setIsChecked(!isChecked);\r\n        }}\r\n      />\r\n      <animated.svg\r\n        style={checkboxAnimationStyle}\r\n        className={`checkbox ${isChecked ? \"checkbox--active\" : \"\"}`}\r\n        // Hide screenreader\r\n        aria-hidden=\"true\"\r\n        viewBox=\"0 0 15 11\"\r\n        fill=\"none\"\r\n      >\r\n        <animated.path\r\n          d=\"M1 4.5L5 9L14 1\"\r\n          strokeWidth=\"2\"\r\n          stroke=\"#fff\"\r\n          ref={(ref) => {\r\n            if (ref) {\r\n              setCheckmarkLength(ref.getTotalLength());\r\n            }\r\n          }}\r\n          strokeDasharray={checkmarkLength}\r\n          strokeDashoffset={checkmarkAnimationStyle.x}\r\n        />\r\n      </animated.svg>\r\n      <span>{label}</span>\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default Checkbox;\r\n","\r\nimport React from 'react';\r\nimport './Searchbar.scss'\r\n\r\nconst SearchBar = ({query,setQuery,onSubmit}) => {\r\n  return (\r\n  <form type=\"search\" onSubmit={onSubmit} role=\"search\">\r\n    <input id=\"search\" type=\"search\" value={query} placeholder=\"Search Query...\" onChange={(e) => setQuery(e.target.value)} autoFocus required />\r\n    <button type=\"search\">Go</button>    \r\n</form>\r\n  );\r\n}\r\n\r\nexport default SearchBar","import React, { useState } from 'react';\nimport logo from './assets/searchLogo.png';\nimport loading from './assets/loading.gif'\nimport './App.css';\nimport Checkbox from './components/Checkbox';\nimport SearchBar from './components/SearchBar';\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [stopwords, setStopwords] = useState(false);\n  const [stemming, setStemming] = useState(false);\n  const [fetching, setFetching] = useState(false);\n\n  const [data, setData] = useState(null);\n\n  const colours = ['#D1E7FE','#F3D9FF','#C4D0FB','#BAF1E3']\n\n  const updateInput = async (input) => {\n    setQuery(input);\n }\n\n const fetchData = (toggleStop, toggleStem) => {\n   const fetchString = \"http://localhost:8000/search/?query=\" + query + \"&stemming=\" + toggleStem + \"&stopwords=\" + toggleStop; \n   console.log(fetchString);\n  fetch(fetchString, {mode: 'cors'})\n    .then((response) => response.json())\n    .then((data) => {\n      console.log(data);\n      setData(data);\n    })\n    .catch((error) => {\n      console.log(error);\n    })\n    .finally(() => {\n      setFetching(false);\n    });\n};\n\n const onSubmit = async (event) => {\n   event.preventDefault();\n   setFetching(true);\n   setData(null);\n   const toggleStop = stopwords ? \"ON\" : \"OFF\";\n   const toggleStem = stemming ? \"ON\" : \"OFF\";\n   fetchData(toggleStop, toggleStem);\n   // reset \n   setQuery(\"\");\n   setStopwords(false);\n   setStemming(false);\n }\n\n  return (\n    <div className=\"App\">\n      <div className=\"background\">\n        <div className=\"inner-header\">\n          <img src={logo} className=\"logo\" alt=\"Logo \" />\n          <h1>CACM Search Engine</h1>\n          <div className=\"search-box\">\n            <SearchBar \n              query={query}\n              setQuery={updateInput}\n              onSubmit={onSubmit}\n            />\n            <Checkbox \n              label=\"Stop Words\" \n              isChecked={stopwords}\n              setIsChecked={setStopwords}\n            />\n            <Checkbox\n              label=\"Stemming\" \n              isChecked={stemming}\n              setIsChecked={setStemming}\n            />\n          </div>\n        </div>\n        { fetching && \n           <div className=\"loading-indicator\">\n           <img src={loading} className=\"logo\" alt=\"Logo \" />\n          </div>\n        }\n        {data !== null &&\n         Object.keys(data).map((type) => {\n           if (type === \"Time\") {\n             return(\n               <p>Top 10 Results ({data[type]} seconds)</p>\n             )\n           } else {\n            console.log(type)\n            console.log(colours[(type % (colours.length - 1))])\n            return (\n                <div className=\"data-card\" style={{\"background\": colours[(type % (colours.length - 1))]}}>\n                  <p>Rank: {data[type][\"Rank\"]}</p>\n                  <p>Title: {data[type][\"Title\"]}</p>\n                  <p>Author(s): {data[type][\"Author(s)\"]}</p>\n                  <p>Document: {data[type][\"Document\"]}</p>\n                  <p>Score: {data[type][\"Score\"]}</p>\n                </div>\n            ) \n           }\n      })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}